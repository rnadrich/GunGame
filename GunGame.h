/*
-----------------------------------------------------------------------------
Filename:    GunGame.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/
#ifndef __GunGame_h_
#define __GunGame_h_

#include "BaseApplication.h"
#include "SoundManager.h" //raquel
#include <OISJoyStick.h>
#include <vrpn_Tracker.h>
#include <math.h>
#include <CEGUI/CEGUI.h>
#include <CEGUI/RendererModules/Ogre/CEGUIOgreRenderer.h>
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif

class GunGame : public BaseApplication, public OIS::JoyStickListener
{
private:
	void create_Room(void);
	bool processUnbufferedInput(const Ogre::FrameEvent& evt);
	static void VRPN_CALLBACK handleIotracker(void* userData, const vrpn_TRACKERCB t);
	static void VRPN_CALLBACK handleRightHandTracker(void* userData, const vrpn_TRACKERCB t);
	vrpn_Tracker_Remote* iotracker;
	vrpn_Tracker_Remote* rightHandTracker;
	vrpn_TRACKERCB Playerdata;
	vrpn_TRACKERCB Weapondata;
	Ogre::SceneNode* targetNode;
	Ogre::SceneNode* weaponNode;
	Ogre::SceneNode* weaponNode2;
	Ogre::SceneNode* weaponTargetNode;
	Ogre::SceneNode* playerNode;
	Ogre::Camera* PlayerCam;
	Ogre::SceneNode* camNode;

	Ogre::Timer* mTimer;
	Ogre::Timer* pause;
	long long time_offset;
	int time;
	int times_paused;
	const long long END_TIME;

	int num_targets; //total targets
	int r_targets; //remaning targets
	Ogre::Real mscore; //score
	bool score_calculated;
	//menu
	bool menu_visable;
	int gun; //changes the gun
	void remove_targets(void);

	CEGUI::Window* sheet;
	CEGUI::Window* quit;
	CEGUI::Window* targets;
	CEGUI::Window* score;
	CEGUI::Window* timer;
	CEGUI::Window* new_game;
	CEGUI::Window* pistol;
	CEGUI::Window* shotgun;
	CEGUI::Window* back;
	void gun_menu(void);
	void reset_game(void);
	void remove_gun_menu(void);
	void create_menu(void);
	void remove_menu(void);
	void show_menu(void);
	void load_targets(void);
	Ogre::String* name;
	Ogre::SceneNode* shootingtargetNode[20];
	Ogre::Entity* shotgun_ent;
	Ogre::Entity* pistol_ent;
	Ogre::Entity* target[20];
	void load_gun(void);
	int shots_fired;
	int shots_hit;
	void calculate_score(void);
	Ogre::Camera* secondCam;
public:
    GunGame(void);
    virtual ~GunGame(void);
	//added by wil
	virtual void fireLaser(void);
	//

protected:
    virtual void createScene(void);
	virtual void createFrameListener(void);
	virtual void createCamera(void);
	virtual void createViewports(void);
	// Ogre::FrameListener
    virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
    // OIS::KeyListener
	virtual bool keyPressed( const OIS::KeyEvent &arg );
    virtual bool keyReleased( const OIS::KeyEvent &arg );
    // OIS::MouseListener
	virtual bool mouseMoved( const OIS::MouseEvent &arg );
	virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
	virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
	//OIS::JoystickListener
	virtual bool povMoved(const OIS::JoyStickEvent &arg, int index);
	virtual bool buttonPressed(const OIS::JoyStickEvent &arg, int button);
	virtual bool axisMoved(const OIS::JoyStickEvent &arg, int axis){return true;}
	virtual bool buttonReleased(const OIS::JoyStickEvent &arg, int button);
	Ogre::Real mRotate;          // The rotate constant
	Ogre::Real mMove;            // The movement constant
	Ogre::SceneNode *mCamNode;   // The SceneNode the camera is currently attached to
	Ogre::Vector3 mDirection;     // Value to move in the correct direction
	OIS::JoyStick* mJoystick;

	//Sound
	SoundManager* soundMgr;
	unsigned int audioClip1;
	unsigned int audioClip2;
	unsigned int audioClip3;
	unsigned int audioClip4;
	unsigned int audioClip5;

	virtual bool laserHit(Ogre::String name); 
	void removeLaser(void); 
	bool mActive;
	Ogre::Real mLaserLength;
	Ogre::Real mLaserSeconds;
	Ogre::Real mCurrentLaserSeconds;
	Ogre::ManualObject* mLaser; 
	Ogre::SceneNode* mLaserNode; 
	Ogre::RaySceneQuery *mRaySceneQuery;
	//recently added
	CEGUI::OgreRenderer* mRenderer;
	//menu handlers
	 bool quit_Event(const CEGUI::EventArgs &e);
	 bool new_game_Event(const CEGUI::EventArgs &e);
	  bool pistol_Event(const CEGUI::EventArgs &e);
	  bool back_Event(const CEGUI::EventArgs &e);
	  bool shotgun_Event(const CEGUI::EventArgs &e);

		
};

#endif // #ifndef __GunGame_h_
