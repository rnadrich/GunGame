/*
-----------------------------------------------------------------------------
Filename:    GunGame.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "GunGame.h"
#include <OgreMeshManager.h>
#include "SoundManager.h" 

CEGUI::MouseButton convertButton(OIS::MouseButtonID buttonID)
{
	switch (buttonID)
    {
    case OIS::MB_Left:
        return CEGUI::LeftButton;
 
    case OIS::MB_Right:
        return CEGUI::RightButton;
 
    case OIS::MB_Middle:
        return CEGUI::MiddleButton;
 
    default:
        return CEGUI::LeftButton;
    }
}

//-------------------------------------------------------------------------------------
GunGame::GunGame(void):
	mLaserSeconds(0.15f),
	mCurrentLaserSeconds(0.0f),
	mLaserLength(50000.0f),
	END_TIME(145),
	num_targets(20)
{
}
//-------------------------------------------------------------------------------------
GunGame::~GunGame(void)
{
}

//-------------------------------------------------------------------------------------
void GunGame::createScene(void)
{
		name=new Ogre::String[num_targets];
	for(int i=0;i<num_targets;i++)
		{
			shootingtargetNode[i]=mSceneMgr->getRootSceneNode()->createChildSceneNode(Ogre::StringConverter::toString(i));
			name[i]="Target"+Ogre::StringConverter::toString(i);
			target[i]=mSceneMgr->createEntity(name[i],"target.mesh");
	}
	soundMgr = SoundManager::createManager();
	soundMgr->init();
	soundMgr->setAudioPath( (char*) "..\\..\\media\\sounds\\" );
	soundMgr->loadAudio( "shotgunsound.wav", &audioClip1, false);

	r_targets=0;
	mscore=0;
	score_calculated=true;
	time=END_TIME;
	time_offset=0;
	times_paused=-1;
	gun=0;
	shots_fired=0;
	shots_hit=0;
	mTimer=new Ogre::Timer();
	mTimer->reset();
	pause=new Ogre::Timer();
	mRaySceneQuery = mSceneMgr->createRayQuery(Ogre::Ray());

	iotracker = new vrpn_Tracker_Remote("iotracker@161.67.196.59:3883");
	iotracker->register_change_handler(this, handleIotracker);
	
	rightHandTracker = new vrpn_Tracker_Remote("Right_hand@161.67.196.59:3883");
	rightHandTracker->register_change_handler(this, handleRightHandTracker);

	vrpn_TRACKERCB blank = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
	Playerdata = blank;
	Weapondata=blank;

	PlayerCam=mSceneMgr->createCamera("PlayerCam");
	mWindow->getViewport(0)->setCamera(PlayerCam);
	PlayerCam->setPosition(Ogre::Vector3(0,0,0));
	PlayerCam->lookAt(Ogre::Vector3(0,0,-1));
	camNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
	PlayerCam->setNearClipDistance(0.1);


	playerNode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Player");
	playerNode->setPosition(Ogre::Vector3(0,0,-1));
	Ogre::SceneNode* hmdNode = playerNode->createChildSceneNode();
	Ogre::SceneNode* eyeNode = hmdNode->createChildSceneNode("eye");
	eyeNode->translate(0.0, -0.1, 0.05);
	eyeNode->attachObject(PlayerCam);
	camNode=eyeNode;
	targetNode = hmdNode;
	
	
	weaponNode=playerNode->createChildSceneNode("Weapon");
	weaponNode->setPosition(Ogre::Vector3(0,0,0));
	//weaponNode->scale(0,0.1,0.1);
	weaponTargetNode=weaponNode;
	//weaponNode->scale(1/2,1/2,1/2);

	pistol_ent=mSceneMgr->createEntity("pistol","pistol.mesh");
	shotgun_ent=mSceneMgr->createEntity("Shotgun","Shotgun.mesh");
	//	load_gun();
	
	//added by wil
	mLaser =  mSceneMgr->createManualObject("laser"); 
	mLaserNode = weaponNode;

	//Scene behind
	

	Ogre::SceneNode* barrelNode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel");
	barrelNode->setPosition(Ogre::Vector3(-100,-20,500));
	Ogre::Entity *barrel=mSceneMgr->createEntity("barrel","barrel.mesh");
	barrelNode->attachObject(barrel);
	barrelNode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode->scale(80,80,80);

	Ogre::SceneNode* barrelNode1=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel1");
	barrelNode1->setPosition(Ogre::Vector3(100,-20,500));
	barrel=mSceneMgr->createEntity("barrel1","barrel.mesh");
	barrelNode1->attachObject(barrel);
	barrelNode1->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode1->scale(80,80,80);

	Ogre::SceneNode* barrelNode2=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel2");
	barrelNode2->setPosition(Ogre::Vector3(50,-20,450));
	barrel=mSceneMgr->createEntity("barrel2","barrel.mesh");
	barrelNode2->attachObject(barrel);
	barrelNode2->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode2->scale(60,60,60);

	Ogre::SceneNode* barrelNode3=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel3");
	barrelNode3->setPosition(Ogre::Vector3(200,-20,450));
	barrel=mSceneMgr->createEntity("barrel3","barrel.mesh");
	barrelNode3->attachObject(barrel);
	barrelNode3->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode3->scale(100,100,100);

	Ogre::SceneNode* barrelNode4=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel4");
	barrelNode4->setPosition(Ogre::Vector3(-200,-20,450));
	barrel=mSceneMgr->createEntity("barrel4","barrel.mesh");
	barrelNode4->attachObject(barrel);
	barrelNode4->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode4->scale(100,100,100);

	/*front scene*/
	

	Ogre::SceneNode* barrelNode10=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel10");
	barrelNode10->setPosition(Ogre::Vector3(200,-20,-500));
	barrel=mSceneMgr->createEntity("barrel10","barrel.mesh");
	barrelNode10->attachObject(barrel);
	//barrelNode10->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode10->scale(90,90,90);

	Ogre::SceneNode* barrelNode11=mSceneMgr->getRootSceneNode()->createChildSceneNode("Barrel11");
	barrelNode11->setPosition(Ogre::Vector3(-150,-20,-500));
	barrel=mSceneMgr->createEntity("barrel11","barrel.mesh");
	barrelNode11->attachObject(barrel);
	//barrelNode11->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	barrelNode11->scale(90,90,90);

	Ogre::SceneNode* cementwall=mSceneMgr->getRootSceneNode()->createChildSceneNode("CementWall");
	cementwall->setPosition(Ogre::Vector3(0,-20,-550));
	Ogre::Entity *cement=mSceneMgr->createEntity("cement","cementwall.mesh");
	cementwall->attachObject(cement);
	cementwall->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	cementwall->scale(150,20,150);

	Ogre::SceneNode* flammablenode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Flammable");
	flammablenode->setPosition(Ogre::Vector3(400,-20,-500));
	Ogre::Entity *flamm=mSceneMgr->createEntity("flammable","flammable.mesh");
	flammablenode->attachObject(flamm);
	flammablenode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	//flammablenode->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	flammablenode->scale(150,150,150);

	//left side scene
	Ogre::SceneNode* shelvesnode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Shelves");//shelf on right
	shelvesnode->setPosition(Ogre::Vector3(550,200,200));
	Ogre::Entity *shelves=mSceneMgr->createEntity("shelves","wareshelves.mesh");
	shelvesnode->attachObject(shelves);
	shelvesnode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shelvesnode->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shelvesnode->scale(70,70,70);

	Ogre::SceneNode* shelvesnode1=mSceneMgr->getRootSceneNode()->createChildSceneNode("Shelves1");//shelf on left
	shelvesnode1->setPosition(Ogre::Vector3(550,200,-400));
	shelves=mSceneMgr->createEntity("shelves1","wareshelves.mesh");
	shelvesnode1->attachObject(shelves);
	shelvesnode1->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shelvesnode1->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shelvesnode1->scale(70,70,70);

	

	Ogre::SceneNode* personnode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Person");
	personnode->setPosition(Ogre::Vector3(530,-20,-100));
	Ogre::Entity *person=mSceneMgr->createEntity("person","person.mesh");
	personnode->attachObject(person);
	personnode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	personnode->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	personnode->scale(50,50,50);

	//right side scene
	//(x,y,z)
	//(how far back from center, how far off ground, distance from middle of wall)
	Ogre::SceneNode* forkliftNode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Forklift");
	forkliftNode->setPosition(Ogre::Vector3(-540,-20,500));
	Ogre::Entity *forklift=mSceneMgr->createEntity("forklift","forklift.mesh");
	forkliftNode->attachObject(forklift);
	forkliftNode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	forkliftNode->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	forkliftNode->scale(750,750,750);

	Ogre::SceneNode* doubleforkliftNode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Double Forklift");
	doubleforkliftNode->setPosition(Ogre::Vector3(-540,-20,150));
	forklift=mSceneMgr->createEntity("doubleForklift","2forklifts.mesh");
	doubleforkliftNode->attachObject(forklift);
	doubleforkliftNode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	doubleforkliftNode->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	doubleforkliftNode->scale(60,60,60);

	

	Ogre::SceneNode* radioactivenode=mSceneMgr->getRootSceneNode()->createChildSceneNode("Radioactive");
	radioactivenode->setPosition(Ogre::Vector3(-540,-20,-500));
	Ogre::Entity *radio=mSceneMgr->createEntity("radioactive","radioactivebarrel.mesh");
	radioactivenode->attachObject(radio);
	radioactivenode->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	//radioactivenode->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	radioactivenode->scale(90,90,90);
		
		//load_targets();

	mSceneMgr->setAmbientLight(Ogre::ColourValue(0.25, 0.25, 0));

		//Create Ninja
		//Ogre::Entity *ent = mSceneMgr->createEntity("Ninja", "ninja.mesh");
		//PlayerCam->getParentSceneNode()->attachObject(ent);
		//PlayerCam->yaw(Ogre::Degree(180));


	//Create Light
	Ogre::Light* light=mSceneMgr->createLight("Light");
	light->setType(Ogre::Light::LightTypes::LT_POINT);
	light->setPosition(Ogre::Vector3(0,1500/4,-1500/4));
	light->setDiffuseColour(Ogre::ColourValue::White);
	light->setSpecularColour(Ogre::ColourValue::White);
	light->setVisible(true);


	 //// Create the scene node
  //     node = mSceneMgr->getRootSceneNode()->createChildSceneNode("CamNode1");
  //      // Create the pitch node
  //      node = node->createChildSceneNode("PitchNode1");
		//node->attachObject(mCamera);
        
	 

	//mSceneMgr->setSkyDome(true, "Examples/CloudySky", 5, 8);


	create_Room();

	soundMgr->loadAudio( "idle.wav", &audioClip2, true);
	soundMgr->loadAudio( "menuloop.wav", &audioClip3, true);
	soundMgr->loadAudio( "pistolsound.wav", &audioClip4, false); 
	soundMgr->loadAudio( "hittarget.wav", &audioClip5, false);
	
	create_menu();
	show_menu();
	//weaponNode->attachObject(secondCam);

}

void GunGame::load_targets()
{
	for(int i=0;i<num_targets;i++)
		shootingtargetNode[i]=mSceneMgr->getRootSceneNode()->createChildSceneNode(Ogre::StringConverter::toString(i));

	r_targets=0;
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(100,100,500));
	// for testing
	//--------------------------------------------------------------------
	//shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(0,0,500));
	//---------------------------------------------------------------------
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(100,100,100);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(450,450,500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(80,80,80);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-200,70,500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(90,90,90);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-350,450,500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(100,100,100);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(100,400,500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(300,250,500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(80,80,80);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(0,40,-550));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(100,100,100);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(450,400,-500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	//target near flammable
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(400,70,-500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-100,300,-500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(100,100,100);
r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-400,400,-450));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-200,50,-500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(-90),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(100,100,100);
	r_targets++;

	//target on left
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(510,115,-300));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

//target on right
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(530,170,100));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	//target on right 2
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(510,70,400));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	//target near person
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(530,100,-70));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	shootingtargetNode[r_targets]->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-540,70,200));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	//shootingtargetNode[r_targets]30->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(90,90,90);
	r_targets++;

	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-540,450,-200));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	//shootingtargetNode[r_targets]31->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(90,90,90);
	r_targets++;

	//behind forklift
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-540,100,510));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	//shootingtargetNode[r_targets]32->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(90,90,90);
	r_targets++;

	//behind radioactive
	shootingtargetNode[r_targets]->setPosition(Ogre::Vector3(-540,100,-500));
	shootingtargetNode[r_targets]->attachObject(target[r_targets]);
	shootingtargetNode[r_targets]->lookAt(playerNode->getPosition(),Ogre::Node::TS_LOCAL,Ogre::Vector3::NEGATIVE_UNIT_Z);
	//shootingtargetNode[r_targets]33->yaw(Ogre::Degree(180),Ogre::Node::TS_LOCAL);
	shootingtargetNode[r_targets]->scale(70,70,70);
	r_targets++;
}

void GunGame::load_gun()
{
	weaponNode->detachAllObjects();
		if(gun==1)weaponNode->attachObject(pistol_ent);
		if(gun==0)weaponNode->attachObject(shotgun_ent);
		
}
//-------------------------------------------------------------------------------------

void GunGame::create_Room()
{
	const int height=1500,width=1500;
	Ogre::Plane* plane=new Ogre::Plane(Ogre::Vector3::UNIT_Y, 0);
 
	//ground
    Ogre::MeshManager::getSingleton().createPlane("ground", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		*plane, width, height, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_X);
     Ogre::Entity* entGround = mSceneMgr->createEntity("GroundEntity", "ground");
	Ogre::SceneNode* ground=mSceneMgr->getRootSceneNode()->createChildSceneNode();
	ground->attachObject(entGround);
	ground->translate(Ogre::Vector3(0,-20,0));
    entGround->setMaterialName("Examples/Rockwall");
    entGround->setCastShadows(false);
	delete plane;

	//wall one
	plane=new Ogre::Plane(Ogre::Vector3(Ogre::Vector3::UNIT_X),0);
	    Ogre::MeshManager::getSingleton().createPlane("wall1", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		*plane, width, height/2, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Y);
		Ogre::Entity* entWall_1 =mSceneMgr->createEntity("WallEntity1","wall1");
		Ogre::SceneNode* wall_1=mSceneMgr->getRootSceneNode()->createChildSceneNode();
		wall_1->attachObject(entWall_1);
		wall_1->translate(Ogre::Vector3(-width/2,height/4-20,0));
		entWall_1->setMaterialName("Examples/Rockwall");
		entWall_1->setCastShadows(false);
	delete plane;

	//wall 2
		plane=new Ogre::Plane(-Ogre::Vector3(Ogre::Vector3::UNIT_X),0);
	    Ogre::MeshManager::getSingleton().createPlane("wall2", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		*plane, width, height/2, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Y);
		Ogre::Entity* entWall_2 =mSceneMgr->createEntity("WallEntity2","wall2");
		Ogre::SceneNode* wall_2=mSceneMgr->getRootSceneNode()->createChildSceneNode();
		wall_2->attachObject(entWall_2);
		wall_2->translate(Ogre::Vector3(width/2,height/4-20,0));
		entWall_2->setMaterialName("Examples/Rockwall");
		entWall_2->setCastShadows(false);
			delete plane;

		//wall 3
		plane=new Ogre::Plane(-Ogre::Vector3(Ogre::Vector3::UNIT_Z),0);
	    Ogre::MeshManager::getSingleton().createPlane("wall3", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		*plane, width, height/2, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Y);
		Ogre::Entity* entWall_3 =mSceneMgr->createEntity("WallEntity3","wall3");
		Ogre::SceneNode* wall_3=mSceneMgr->getRootSceneNode()->createChildSceneNode();
		wall_3->attachObject(entWall_3);
		wall_3->translate(Ogre::Vector3(0,height/4-20,width/2));
		entWall_3->setMaterialName("Examples/Rockwall");
		entWall_3->setCastShadows(false);
			delete plane;

			//wall 4
		plane=new Ogre::Plane(Ogre::Vector3(Ogre::Vector3::UNIT_Z),0);
	    Ogre::MeshManager::getSingleton().createPlane("wall4", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		*plane, width, height/2, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Y);
		Ogre::Entity* entWall_4 =mSceneMgr->createEntity("WallEntity4","wall4");
		Ogre::SceneNode* wall_4=mSceneMgr->getRootSceneNode()->createChildSceneNode();
		wall_4->attachObject(entWall_4);
		wall_4->translate(Ogre::Vector3(0,height/4-20,-width/2));
		entWall_4->setMaterialName("Examples/Rockwall");
		entWall_4->setCastShadows(false);
			delete plane;

		//celling
		plane=new Ogre::Plane(Ogre::Vector3(-Ogre::Vector3::UNIT_Y),0);
	    Ogre::MeshManager::getSingleton().createPlane("roof", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		*plane, width, height, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_X);
		Ogre::Entity* entRoof =mSceneMgr->createEntity("roofEntity","roof");
		Ogre::SceneNode*roof=mSceneMgr->getRootSceneNode()->createChildSceneNode();
		roof->attachObject(entRoof);
		roof->translate(Ogre::Vector3(0,height/2-20,0));
		entRoof->setMaterialName("Examples/Rockwall");
		entRoof->setCastShadows(false);
			delete plane;
}

//-------------------------------------------------------------------------------------

void GunGame::createCamera()
{
	mCamera=mSceneMgr->createCamera("stuff");

	mCamera->setPosition(Ogre::Vector3(0,0,0));
	mCamera->lookAt(Ogre::Vector3(0,0,-1));

	mCamera->setNearClipDistance(0.1);

	mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller

	secondCam=mSceneMgr->createCamera("SecondCam");

	secondCam->setNearClipDistance(0.1);
	secondCam->lookAt(Ogre::Vector3(0,0,-1));

}

//-------------------------------------------------------------------------------------

void GunGame::createViewports(void)
{
    // Create one viewport, entire window
    Ogre::Viewport* vp = mWindow->addViewport(mCamera);
    vp->setBackgroundColour(Ogre::ColourValue(0,0,0));
    // Alter the camera aspect ratio to match the viewport
    mCamera->setAspectRatio(Ogre::Real(vp->getActualWidth()) / Ogre::Real(vp->getActualHeight()));    
}

//-------------------------------------------------------------------------------------

void GunGame::createFrameListener()
{
	BaseApplication::createFrameListener();
	// Populate the camera container
		mCamNode = playerNode;
 
		// set the rotation and move speed
		mRotate = 0.13;
		mMove = 250;
 
		mDirection = Ogre::Vector3::ZERO;

		if(mInputManager->getNumberOfDevices(OIS::OISJoyStick)!=0)
		{
			mJoystick=static_cast<OIS::JoyStick*>(mInputManager->createInputObject( OIS::OISJoyStick, true ));

			mJoystick->setEventCallback(this);
		}

			mTrayMgr->hideTrays();
}

//-------------------------------------------------------------------------------------

bool GunGame::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
		    if(mWindow->isClosed())
        return false;
 
		if(mShutDown)
			return false;


 if (mCurrentLaserSeconds>0) {
		mCurrentLaserSeconds-=evt.timeSinceLastFrame;
		if (mCurrentLaserSeconds<=0) {
			removeLaser();
		}
	}



		//Need to capture/update each device
		if(mInputManager->getNumberOfDevices(OIS::OISJoyStick)!=0){mJoystick->capture();}
		/*else*/{mKeyboard->capture();
		mMouse->capture();}
		bool ret=mTrayMgr->frameRenderingQueued(evt);
		iotracker->mainloop();
		rightHandTracker->mainloop();
		//recently added
		camNode->translate(mDirection*evt.timeSinceLastFrame,Ogre::Node::TS_LOCAL);

		if(!processUnbufferedInput(evt)) return false;

		CEGUI::System::getSingleton().injectTimePulse(evt.timeSinceLastFrame);

		//update target counter
		
		CEGUI::String text="There are "+Ogre::StringConverter::toString(r_targets)+"/"+Ogre::StringConverter::toString(num_targets)+" targets remaining";
		targets->setText(text);


		if(!menu_visable)time = END_TIME-((mTimer->getMilliseconds())/1000-time_offset);
		
		text=Ogre::StringConverter::toString(time)+" seconds remaning";
		timer->setText(text);

		text="Score:"+Ogre::StringConverter::toString(mscore);
		score->setText(text);

		if(time==0 ||r_targets==0)
		{
			if(!menu_visable)show_menu();
			if(!score_calculated)
				{
					calculate_score();
			}
		}
		return ret;

}

//-------------------------------------------------------------------------------------

// OIS::KeyListener
bool GunGame::keyPressed( const OIS::KeyEvent &arg )
{
	switch (arg.key)
	{
	/*case OIS::KC_1:
		PlayerCam->getParentSceneNode()->detachObject(PlayerCam);
		camNode=mSceneMgr->getSceneNode("Cam2");
		camNode->attachObject(PlayerCam);
		break;

	case OIS::KC_2:
		PlayerCam->getParentSceneNode()->detachObject(PlayerCam);
		camNode=mSceneMgr->getSceneNode("eye");
		camNode->attachObject(PlayerCam);
		break;*/
		case OIS::KC_UP:
		case OIS::KC_W:
			mDirection.z = mMove;
			break;
 
		case OIS::KC_DOWN:
		case OIS::KC_S:
			mDirection.z = -mMove;
			break;
 
		case OIS::KC_LEFT:
		case OIS::KC_A:
			mDirection.x = mMove;
			break;

 		case OIS::KC_RIGHT:
		case OIS::KC_D:
			mDirection.x = -mMove;
			break;
 
		case OIS::KC_PGDOWN:
		case OIS::KC_E:
			mDirection.y = -mMove;
			break;
 
		case OIS::KC_PGUP:
		case OIS::KC_Q:
			mDirection.y = mMove;
			break;
 
		case OIS::KC_ESCAPE: 
			if(!menu_visable)show_menu();
			else 
				{
					remove_menu();
					remove_gun_menu();
			}
			break;
		case OIS::KC_SPACE:
		if(!menu_visable)
		{
		fireLaser();
		if(gun==0)soundMgr->playAudio( audioClip1, true );
		if(gun==1)soundMgr->playAudio( audioClip4, true );
		shots_fired++;
		}
		break;
		default:
			break;
	}
	return true;
}

//-------------------------------------------------------------------------------------

bool GunGame::keyReleased( const OIS::KeyEvent &arg )
{
 
			switch (arg.key)
			{
				case OIS::KC_UP:
				case OIS::KC_W:
					mDirection.z = 0;
				break;
 
				case OIS::KC_DOWN:
				case OIS::KC_S:
					mDirection.z = 0;
					break;
 
				case OIS::KC_LEFT:
				case OIS::KC_A:
					mDirection.x = 0;
					break;
 
				case OIS::KC_RIGHT:
				case OIS::KC_D:
					mDirection.x = 0;
					break;
 
				case OIS::KC_PGDOWN:
				case OIS::KC_E:
					mDirection.y = 0;
					break;
 
				case OIS::KC_PGUP:
				case OIS::KC_Q:
					mDirection.y = 0;
					break;
 
				default:
					break;
				}
				return true;
		}
	
//-------------------------------------------------------------------------------------

// OIS::MouseListener
bool GunGame::mouseMoved( const OIS::MouseEvent &arg ){
		if(menu_visable)
	{
		CEGUI::System &sys = CEGUI::System::getSingleton();
sys.injectMouseMove(arg.state.X.rel, arg.state.Y.rel);
// Scroll wheel.
if (arg.state.Z.rel)
    sys.injectMouseWheelChange(arg.state.Z.rel / 120.0f);
	}
	else
	{
	camNode->yaw(Ogre::Degree(-mRotate * arg.state.X.rel), Ogre::Node::TS_WORLD);
	camNode->pitch(Ogre::Degree(-mRotate * arg.state.Y.rel), Ogre::Node::TS_LOCAL);
	}
	return true;
}
//-------------------------------------------------------------------------------------

bool GunGame::mousePressed(const OIS::MouseEvent &arg, OIS::MouseButtonID id)
{
if(menu_visable)
	 CEGUI::System::getSingleton().injectMouseButtonDown(convertButton(id));
	return true;
}

bool GunGame::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	if(menu_visable)
		CEGUI::System::getSingleton().injectMouseButtonUp(convertButton(id));
return true;
}

//OIS::JoyStickListener
bool GunGame::povMoved(const OIS::JoyStickEvent &arg, int index)
{
	//if(menu_visable)
	//{
	//	float x=0,y=0;
	//switch (arg.state.mPOV[0].direction)
	//{
	//case(arg.state.mPOV[0].North):
	//	y=-10;
	//	break;

	//case(arg.state.mPOV[0].South):
	//	y=10;
	//	break;

	//case (arg.state.mPOV[0].West):
	//	x=-10;
	//	break;

	//case(arg.state.mPOV[0].East):
	//	x=10;
	//	break;

	//case(arg.state.mPOV[0].NorthWest):
	//	y=10;
	//	x=-10;
	//	break;

	//case(arg.state.mPOV[0].NorthEast):
	//	y=10;
	//	x=10;
	//	break;

	//case(arg.state.mPOV[0].SouthWest):
	//	y=-10;
	//	x=-10;
	//	break;

	//case(arg.state.mPOV[0].SouthEast):
	//	y=-10;
	//	x=10;
	//	break;

	//case(arg.state.mPOV[0].Centered):
	//	x=y=0;
	//	break;
	//default:
	//	x=y=0;
	//	break;
	//}
	//	CEGUI::System &sys = CEGUI::System::getSingleton();
	//	sys.injectMouseMove(x,y);
	//}
	return true;
}

bool GunGame::buttonPressed(const OIS::JoyStickEvent &arg, int button)
{
	switch (button)
	{
	case 0:
		if(!menu_visable)
		{
		fireLaser();
		if(gun==0)soundMgr->playAudio( audioClip1, true );
		if(gun==1)soundMgr->playAudio( audioClip4, true );
		shots_fired++;
		}
		else
		{
			 CEGUI::System::getSingleton().injectMouseButtonDown(convertButton(OIS::MouseButtonID::MB_Left));
		}
		break;
	case 1:
		if(!menu_visable)show_menu();
			else 
				{
					remove_menu();
					remove_gun_menu();
			}
			break;
	default: 
		break;
	}
	return true;
}

bool GunGame::buttonReleased(const OIS::JoyStickEvent &arg, int button)
{
	if(menu_visable && button==0)
	{
		CEGUI::System::getSingleton().injectMouseButtonUp((convertButton(OIS::MouseButtonID::MB_Left)));
	}
	return true;
}

//-------------------------------------------------------------------------------------
bool GunGame::processUnbufferedInput(const Ogre::FrameEvent& evt)
{
	if(!menu_visable)
		{
			targetNode->setPosition( Ogre::Vector3( Playerdata.pos[0], Playerdata.pos[1], Playerdata.pos[2] ) );
			targetNode->setOrientation( Playerdata.quat[3], Playerdata.quat[0], Playerdata.quat[1], Playerdata.quat[2] );

			weaponTargetNode->setPosition( Ogre::Vector3( Weapondata.pos[0], Weapondata.pos[1], Weapondata.pos[2] ) );
			weaponTargetNode->setOrientation( Weapondata.quat[3], Weapondata.quat[0], Weapondata.quat[1], Weapondata.quat[2] );
		}
	else
	{
	float x=0,y=0;
	OIS::Pov curJoystick=mJoystick->getJoyStickState().mPOV[0];
		switch(curJoystick.direction)
		{
		case(OIS::Pov::North):
			y=-2.5;
			break;

		case(OIS::Pov::South):
			y=2.5;
			break;

		case (OIS::Pov::West):
			x=-2.5;
			break;

		case(OIS::Pov::East):
			x=2.5;
			break;

		case(OIS::Pov::NorthWest):
			y=2.5;
			x=-2.5;
			break;

		case(OIS::Pov::NorthEast):
			y=2.5;
			x=2.5;
			break;

		case(OIS::Pov::SouthWest):
			y=-2.5;
			x=-2.5;
			break;

		case(OIS::Pov::SouthEast):
			y=-2.5;
			x=2.5;
			break;

		case(OIS::Pov::Centered):
			x=y=0;
			break;
		default:
			x=y=0;
			break;
			}
			CEGUI::System &sys = CEGUI::System::getSingleton();
			sys.injectMouseMove(x,y);
		}
	

return true;
}
//-------------------------------------------------------------------------------------
void VRPN_CALLBACK GunGame::handleIotracker(void* userData, const vrpn_TRACKERCB t)
{
	if (t.sensor == 4) {
	vrpn_TRACKERCB *pData = &(((GunGame*)userData)->Playerdata);
	*pData = t;
	pData->pos[0] /= 100.0; // mm to m
	pData->pos[1] /= 100.0;
	pData->pos[2] /= 100.0;
	}
	if(t.sensor==1)
	{
	vrpn_TRACKERCB *pData2 = &(((GunGame*)userData)->Weapondata);
	*pData2 = t;
	pData2->pos[0] /= 100.0; // mm to m
	pData2->pos[1] /= 100.0;
	pData2->pos[2] /= 100.0;
	}
}

void VRPN_CALLBACK GunGame::handleRightHandTracker(void* userData, const vrpn_TRACKERCB t)
{
	//vrpn_TRACKERCB *pData = &(((GunGame*)userData)->Playerdata);
	//*pData = t;

	//vrpn_TRACKERCB *pData2 = &(((GunGame*)userData)->Weapondata);
	//*pData2 = t;
}
//recently added
//menu
bool GunGame::quit_Event(const CEGUI::EventArgs &e)
{
	mShutDown = true;
	return true;
}

bool GunGame::new_game_Event(const CEGUI::EventArgs &e)
{
	gun_menu();
	return true;
}

bool GunGame::pistol_Event(const CEGUI::EventArgs &e)
{
	gun=1;
	reset_game();
	return true;
}

bool GunGame::shotgun_Event(const CEGUI::EventArgs &e)
{
	gun=0;
	reset_game();
	return true;
}

bool GunGame::back_Event(const CEGUI::EventArgs &e)
{
	remove_gun_menu();
	show_menu();
	return true;
}

void GunGame::create_menu()
{
	mRenderer = &CEGUI::OgreRenderer::bootstrapSystem();
	CEGUI::Imageset::setDefaultResourceGroup("Imagesets");
	CEGUI::Font::setDefaultResourceGroup("Fonts");
	CEGUI::Scheme::setDefaultResourceGroup("Schemes");
	CEGUI::WidgetLookManager::setDefaultResourceGroup("LookNFeel");
	CEGUI::WindowManager::setDefaultResourceGroup("Layouts");

	CEGUI::SchemeManager::getSingleton().create("TaharezLook.scheme");

	//CEGUI::System::getSingleton().setDefaultMouseCursor("TaharezLook", "MouseArrow");

	CEGUI::WindowManager &wmgr = CEGUI::WindowManager::getSingleton();
	sheet = wmgr.createWindow("DefaultWindow", "CEGUIDemo/Sheet");
	CEGUI::System::getSingleton().setDefaultMouseCursor("TaharezLook", "MouseArrow");

	targets=wmgr.createWindow("TaharezLook/Button","Targets");
	targets->setPosition(CEGUI::UVector2(CEGUI::UDim(0.5f,0),CEGUI::UDim((1.0-.05),0)));
	targets->setSize(CEGUI::UVector2(CEGUI::UDim(0.5, 0), CEGUI::UDim(0.05, 0)));

	score=wmgr.createWindow("TaharezLook/Button","Score");
	score->setPosition(CEGUI::UVector2(CEGUI::UDim(0.75f,0),CEGUI::UDim(.0f,0)));
	score->setSize(CEGUI::UVector2(CEGUI::UDim(0.25, 0), CEGUI::UDim(0.05, 0)));
	
	timer=wmgr.createWindow("TaharezLook/Button","Timer");
	timer->setPosition(CEGUI::UVector2(CEGUI::UDim(0.5f,0),CEGUI::UDim(.0f,0)));
	timer->setSize(CEGUI::UVector2(CEGUI::UDim(0.25, 0), CEGUI::UDim(0.05, 0)));

	quit = wmgr.createWindow("TaharezLook/Button", "QuitButton");
	quit->setText("Quit");
	quit->setPosition(CEGUI::UVector2(CEGUI::UDim(0.4f,0),CEGUI::UDim(0.5f,0)));
	quit->setSize(CEGUI::UVector2(CEGUI::UDim(0.15, 0), CEGUI::UDim(0.05, 0)));

	new_game=wmgr.createWindow("TaharezLook/Button", "NewGameButton");
	new_game->setText("New Game");
	new_game->setPosition(CEGUI::UVector2(CEGUI::UDim(0.4f,0),CEGUI::UDim(0.25f,0)));
	new_game->setSize(CEGUI::UVector2(CEGUI::UDim(0.15, 0), CEGUI::UDim(0.05, 0)));

	sheet->addChildWindow(targets);
	sheet->addChildWindow(score);
	sheet->addChildWindow(timer);

	quit->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&GunGame::quit_Event, this));
	new_game->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&GunGame::new_game_Event, this));
	sheet->disable();
	CEGUI::MouseCursor::getSingleton().hide();

	pistol=wmgr.createWindow("TaharezLook/Button","Pistol");
	pistol->setPosition(CEGUI::UVector2(CEGUI::UDim(0.4f,0),CEGUI::UDim(0.4f,0)));
	pistol->setSize(CEGUI::UVector2(CEGUI::UDim(0.15, 0), CEGUI::UDim(0.05, 0)));
	pistol->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&GunGame::pistol_Event, this));
	pistol->setText("Pistol");

		shotgun=wmgr.createWindow("TaharezLook/Button","Shotgun");
	shotgun->setPosition(CEGUI::UVector2(CEGUI::UDim(0.4f,0),CEGUI::UDim(0.5f,0)));
	shotgun->setSize(CEGUI::UVector2(CEGUI::UDim(0.15, 0), CEGUI::UDim(0.05, 0)));
	shotgun->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&GunGame::shotgun_Event, this));
	shotgun->setText("Shotgun");

		back=wmgr.createWindow("TaharezLook/Button","Back");
	back->setPosition(CEGUI::UVector2(CEGUI::UDim(0.4f,0),CEGUI::UDim(0.6f,0)));
	back->setSize(CEGUI::UVector2(CEGUI::UDim(0.15, 0), CEGUI::UDim(0.05, 0)));
	back->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&GunGame::back_Event, this));
	back->setText("Back");
	CEGUI::System::getSingleton().setGUISheet(sheet);
}

void GunGame::show_menu()
{
	soundMgr->pauseAudio(audioClip2);
	soundMgr->playAudio( audioClip3, false ); 
	menu_visable=true;
	times_paused++;
	pause->reset();
	CEGUI::MouseCursor::getSingleton().show();
	sheet->enable();
	sheet->addChildWindow(quit);
	sheet->addChildWindow(new_game);
	CEGUI::System::getSingleton().setGUISheet(sheet);
}

void GunGame::remove_menu()
{
	soundMgr->stopAudio(audioClip3); 
	CEGUI::MouseCursor::getSingleton().hide();
	sheet->disable();
	sheet->removeChildWindow(quit);
	sheet->removeChildWindow(new_game);
	CEGUI::System::getSingleton().setGUISheet(sheet);
	if(times_paused==0)time_offset=pause->getMilliseconds()/1000;
	else if(times_paused!=-1)time_offset+=pause->getMilliseconds()/1000;
	menu_visable=false;
	soundMgr->playAudio(audioClip2,false);
}

void GunGame::reset_game()
{
	score_calculated=false;
	mscore=0;
	time=0;
	time_offset=0;
	times_paused=-1;
	shots_fired=0;
	shots_hit=0;
	remove_menu();
	remove_gun_menu();
	CEGUI::MouseCursor::getSingleton().hide();
	load_gun();
	remove_targets();
	load_targets();
	mTimer->reset();
	soundMgr->playAudio(audioClip2,true);
}

void GunGame::gun_menu()
{
	remove_menu();
	soundMgr->stopAllAudio();
	soundMgr->playAudio( audioClip3, false ); 
	CEGUI::MouseCursor::getSingleton().show();
	menu_visable=true;
	sheet->enable();

	sheet->addChildWindow(pistol);

	sheet->addChildWindow(shotgun);

	sheet->addChildWindow(back);
	CEGUI::System::getSingleton().setGUISheet(sheet);
}

void GunGame::remove_gun_menu()
{
	soundMgr->stopAudio(audioClip3); 
	sheet->removeChildWindow(pistol);
	sheet->removeChildWindow(shotgun);
	sheet->removeChildWindow(back);
	menu_visable=false;
}

//added by wil
//collision detection
//detects if the laser hit
bool GunGame::laserHit(Ogre::String name)

{
	Ogre::Vector3 org=weaponNode->getPosition();
	Ogre::Vector3 ori=weaponNode->getOrientation()*Ogre::Vector3(0,0,-1);
	Ogre::Ray ray(org,ori);
    mRaySceneQuery->setRay(ray);
	Ogre::RaySceneQueryResult &result = mRaySceneQuery->execute();
    Ogre::RaySceneQueryResult::iterator itr;
	for (itr = result.begin(); itr != result.end(); itr++) {
		if (itr->movable->getName().compare(name)==0) {
				return itr->distance<(mLaserLength);
		}
	}
	return false;
}

//fires laser
void GunGame::fireLaser() 
{
	//weaponNode->setPosition(Ogre::Vector3(10,0,-14));
	//weaponNode->setOrientation(-0.95,1,1,1);
	Ogre::Vector3 pos = Ogre::Vector3(0,0,0);
	Ogre::Vector3 dir = /*weaponNode->getOrientation()**/Ogre::Vector3(0,0,-1);

	if (mCurrentLaserSeconds<=0) {
		mLaser->begin("LaserMaterial", Ogre::RenderOperation::OT_LINE_LIST); 
		mLaser->position(pos);

		mLaser->position(pos+dir*mLaserLength);
		mLaser->end(); 
		weaponNode->attachObject(mLaser);
		mCurrentLaserSeconds = mLaserSeconds;
		for(int i=0;i<num_targets;i++)
			if(laserHit(name[i]))
			{
				shots_hit++;
				r_targets--;
				soundMgr->playAudio( audioClip5, true ); 
				shootingtargetNode[i]->detachObject(name[i]);
				mscore+=(int)((time/(double)60)*1000);
			}
	}
}

//removes the laser
void GunGame::removeLaser(void) 
{
	mLaser->clear();
	mLaserNode->detachObject(mLaser);
}
////
void GunGame::calculate_score()
{
	int acc=0;
	if(shots_fired!=0)
		acc=(int)((shots_hit/(double)shots_fired)*1000);
	mscore+=acc;
	score_calculated=true;
}

void GunGame::remove_targets()
{
	for(int i=0;i<num_targets;i++)
	{
		mSceneMgr->destroySceneNode(shootingtargetNode[i]);
	}
}


////----------------------------------------------------------------------------

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        GunGame app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
